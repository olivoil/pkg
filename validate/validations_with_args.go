// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package validate

import "github.com/pkg/errors"

// BoolValidationWithBoolArgsFunc is a custom validation function that can be applied to a bool value with bool args.
type BoolValidationWithBoolArgsFunc func(i bool, args ...bool) error

// Validate implements Validation.
func (v BoolValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(bool)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a bool")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// BoolValidationWithStringArgsFunc is a custom validation function that can be applied to a bool value with string args.
type BoolValidationWithStringArgsFunc func(i bool, args ...string) error

// Validate implements Validation.
func (v BoolValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(bool)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a bool")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// BoolValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a bool value with float64 args.
type BoolValidationWithFloat64ArgsFunc func(i bool, args ...float64) error

// Validate implements Validation.
func (v BoolValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(bool)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a bool")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// BoolValidationWithInt64ArgsFunc is a custom validation function that can be applied to a bool value with int64 args.
type BoolValidationWithInt64ArgsFunc func(i bool, args ...int64) error

// Validate implements Validation.
func (v BoolValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(bool)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a bool")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// BoolValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a bool value with interface{} args.
type BoolValidationWithInterfaceArgsFunc func(i bool, args ...interface{}) error

// Validate implements Validation.
func (v BoolValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(bool)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a bool")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// ByteValidationWithBoolArgsFunc is a custom validation function that can be applied to a byte value with bool args.
type ByteValidationWithBoolArgsFunc func(i byte, args ...bool) error

// Validate implements Validation.
func (v ByteValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(byte)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a byte")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// ByteValidationWithStringArgsFunc is a custom validation function that can be applied to a byte value with string args.
type ByteValidationWithStringArgsFunc func(i byte, args ...string) error

// Validate implements Validation.
func (v ByteValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(byte)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a byte")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// ByteValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a byte value with float64 args.
type ByteValidationWithFloat64ArgsFunc func(i byte, args ...float64) error

// Validate implements Validation.
func (v ByteValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(byte)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a byte")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// ByteValidationWithInt64ArgsFunc is a custom validation function that can be applied to a byte value with int64 args.
type ByteValidationWithInt64ArgsFunc func(i byte, args ...int64) error

// Validate implements Validation.
func (v ByteValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(byte)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a byte")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// ByteValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a byte value with interface{} args.
type ByteValidationWithInterfaceArgsFunc func(i byte, args ...interface{}) error

// Validate implements Validation.
func (v ByteValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(byte)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a byte")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Complex128ValidationWithBoolArgsFunc is a custom validation function that can be applied to a complex128 value with bool args.
type Complex128ValidationWithBoolArgsFunc func(i complex128, args ...bool) error

// Validate implements Validation.
func (v Complex128ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(complex128)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a complex128")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Complex128ValidationWithStringArgsFunc is a custom validation function that can be applied to a complex128 value with string args.
type Complex128ValidationWithStringArgsFunc func(i complex128, args ...string) error

// Validate implements Validation.
func (v Complex128ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(complex128)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a complex128")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Complex128ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a complex128 value with float64 args.
type Complex128ValidationWithFloat64ArgsFunc func(i complex128, args ...float64) error

// Validate implements Validation.
func (v Complex128ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(complex128)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a complex128")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Complex128ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a complex128 value with int64 args.
type Complex128ValidationWithInt64ArgsFunc func(i complex128, args ...int64) error

// Validate implements Validation.
func (v Complex128ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(complex128)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a complex128")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Complex128ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a complex128 value with interface{} args.
type Complex128ValidationWithInterfaceArgsFunc func(i complex128, args ...interface{}) error

// Validate implements Validation.
func (v Complex128ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(complex128)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a complex128")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Complex64ValidationWithBoolArgsFunc is a custom validation function that can be applied to a complex64 value with bool args.
type Complex64ValidationWithBoolArgsFunc func(i complex64, args ...bool) error

// Validate implements Validation.
func (v Complex64ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(complex64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a complex64")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Complex64ValidationWithStringArgsFunc is a custom validation function that can be applied to a complex64 value with string args.
type Complex64ValidationWithStringArgsFunc func(i complex64, args ...string) error

// Validate implements Validation.
func (v Complex64ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(complex64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a complex64")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Complex64ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a complex64 value with float64 args.
type Complex64ValidationWithFloat64ArgsFunc func(i complex64, args ...float64) error

// Validate implements Validation.
func (v Complex64ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(complex64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a complex64")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Complex64ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a complex64 value with int64 args.
type Complex64ValidationWithInt64ArgsFunc func(i complex64, args ...int64) error

// Validate implements Validation.
func (v Complex64ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(complex64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a complex64")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Complex64ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a complex64 value with interface{} args.
type Complex64ValidationWithInterfaceArgsFunc func(i complex64, args ...interface{}) error

// Validate implements Validation.
func (v Complex64ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(complex64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a complex64")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// ErrorValidationWithBoolArgsFunc is a custom validation function that can be applied to a error value with bool args.
type ErrorValidationWithBoolArgsFunc func(i error, args ...bool) error

// Validate implements Validation.
func (v ErrorValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(error)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a error")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// ErrorValidationWithStringArgsFunc is a custom validation function that can be applied to a error value with string args.
type ErrorValidationWithStringArgsFunc func(i error, args ...string) error

// Validate implements Validation.
func (v ErrorValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(error)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a error")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// ErrorValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a error value with float64 args.
type ErrorValidationWithFloat64ArgsFunc func(i error, args ...float64) error

// Validate implements Validation.
func (v ErrorValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(error)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a error")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// ErrorValidationWithInt64ArgsFunc is a custom validation function that can be applied to a error value with int64 args.
type ErrorValidationWithInt64ArgsFunc func(i error, args ...int64) error

// Validate implements Validation.
func (v ErrorValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(error)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a error")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// ErrorValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a error value with interface{} args.
type ErrorValidationWithInterfaceArgsFunc func(i error, args ...interface{}) error

// Validate implements Validation.
func (v ErrorValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(error)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a error")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Float32ValidationWithBoolArgsFunc is a custom validation function that can be applied to a float32 value with bool args.
type Float32ValidationWithBoolArgsFunc func(i float32, args ...bool) error

// Validate implements Validation.
func (v Float32ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(float32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a float32")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Float32ValidationWithStringArgsFunc is a custom validation function that can be applied to a float32 value with string args.
type Float32ValidationWithStringArgsFunc func(i float32, args ...string) error

// Validate implements Validation.
func (v Float32ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(float32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a float32")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Float32ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a float32 value with float64 args.
type Float32ValidationWithFloat64ArgsFunc func(i float32, args ...float64) error

// Validate implements Validation.
func (v Float32ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(float32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a float32")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Float32ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a float32 value with int64 args.
type Float32ValidationWithInt64ArgsFunc func(i float32, args ...int64) error

// Validate implements Validation.
func (v Float32ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(float32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a float32")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Float32ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a float32 value with interface{} args.
type Float32ValidationWithInterfaceArgsFunc func(i float32, args ...interface{}) error

// Validate implements Validation.
func (v Float32ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(float32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a float32")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Float64ValidationWithBoolArgsFunc is a custom validation function that can be applied to a float64 value with bool args.
type Float64ValidationWithBoolArgsFunc func(i float64, args ...bool) error

// Validate implements Validation.
func (v Float64ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(float64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a float64")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Float64ValidationWithStringArgsFunc is a custom validation function that can be applied to a float64 value with string args.
type Float64ValidationWithStringArgsFunc func(i float64, args ...string) error

// Validate implements Validation.
func (v Float64ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(float64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a float64")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Float64ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a float64 value with float64 args.
type Float64ValidationWithFloat64ArgsFunc func(i float64, args ...float64) error

// Validate implements Validation.
func (v Float64ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(float64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a float64")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Float64ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a float64 value with int64 args.
type Float64ValidationWithInt64ArgsFunc func(i float64, args ...int64) error

// Validate implements Validation.
func (v Float64ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(float64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a float64")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Float64ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a float64 value with interface{} args.
type Float64ValidationWithInterfaceArgsFunc func(i float64, args ...interface{}) error

// Validate implements Validation.
func (v Float64ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(float64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a float64")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// IntValidationWithBoolArgsFunc is a custom validation function that can be applied to a int value with bool args.
type IntValidationWithBoolArgsFunc func(i int, args ...bool) error

// Validate implements Validation.
func (v IntValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// IntValidationWithStringArgsFunc is a custom validation function that can be applied to a int value with string args.
type IntValidationWithStringArgsFunc func(i int, args ...string) error

// Validate implements Validation.
func (v IntValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// IntValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a int value with float64 args.
type IntValidationWithFloat64ArgsFunc func(i int, args ...float64) error

// Validate implements Validation.
func (v IntValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// IntValidationWithInt64ArgsFunc is a custom validation function that can be applied to a int value with int64 args.
type IntValidationWithInt64ArgsFunc func(i int, args ...int64) error

// Validate implements Validation.
func (v IntValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// IntValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a int value with interface{} args.
type IntValidationWithInterfaceArgsFunc func(i int, args ...interface{}) error

// Validate implements Validation.
func (v IntValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int16ValidationWithBoolArgsFunc is a custom validation function that can be applied to a int16 value with bool args.
type Int16ValidationWithBoolArgsFunc func(i int16, args ...bool) error

// Validate implements Validation.
func (v Int16ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int16)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int16")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int16ValidationWithStringArgsFunc is a custom validation function that can be applied to a int16 value with string args.
type Int16ValidationWithStringArgsFunc func(i int16, args ...string) error

// Validate implements Validation.
func (v Int16ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int16)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int16")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int16ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a int16 value with float64 args.
type Int16ValidationWithFloat64ArgsFunc func(i int16, args ...float64) error

// Validate implements Validation.
func (v Int16ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int16)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int16")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int16ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a int16 value with int64 args.
type Int16ValidationWithInt64ArgsFunc func(i int16, args ...int64) error

// Validate implements Validation.
func (v Int16ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int16)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int16")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int16ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a int16 value with interface{} args.
type Int16ValidationWithInterfaceArgsFunc func(i int16, args ...interface{}) error

// Validate implements Validation.
func (v Int16ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int16)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int16")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int32ValidationWithBoolArgsFunc is a custom validation function that can be applied to a int32 value with bool args.
type Int32ValidationWithBoolArgsFunc func(i int32, args ...bool) error

// Validate implements Validation.
func (v Int32ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int32")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int32ValidationWithStringArgsFunc is a custom validation function that can be applied to a int32 value with string args.
type Int32ValidationWithStringArgsFunc func(i int32, args ...string) error

// Validate implements Validation.
func (v Int32ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int32")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int32ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a int32 value with float64 args.
type Int32ValidationWithFloat64ArgsFunc func(i int32, args ...float64) error

// Validate implements Validation.
func (v Int32ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int32")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int32ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a int32 value with int64 args.
type Int32ValidationWithInt64ArgsFunc func(i int32, args ...int64) error

// Validate implements Validation.
func (v Int32ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int32")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int32ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a int32 value with interface{} args.
type Int32ValidationWithInterfaceArgsFunc func(i int32, args ...interface{}) error

// Validate implements Validation.
func (v Int32ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int32")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int64ValidationWithBoolArgsFunc is a custom validation function that can be applied to a int64 value with bool args.
type Int64ValidationWithBoolArgsFunc func(i int64, args ...bool) error

// Validate implements Validation.
func (v Int64ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int64")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int64ValidationWithStringArgsFunc is a custom validation function that can be applied to a int64 value with string args.
type Int64ValidationWithStringArgsFunc func(i int64, args ...string) error

// Validate implements Validation.
func (v Int64ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int64")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int64ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a int64 value with float64 args.
type Int64ValidationWithFloat64ArgsFunc func(i int64, args ...float64) error

// Validate implements Validation.
func (v Int64ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int64")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int64ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a int64 value with int64 args.
type Int64ValidationWithInt64ArgsFunc func(i int64, args ...int64) error

// Validate implements Validation.
func (v Int64ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int64")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int64ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a int64 value with interface{} args.
type Int64ValidationWithInterfaceArgsFunc func(i int64, args ...interface{}) error

// Validate implements Validation.
func (v Int64ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int64")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int8ValidationWithBoolArgsFunc is a custom validation function that can be applied to a int8 value with bool args.
type Int8ValidationWithBoolArgsFunc func(i int8, args ...bool) error

// Validate implements Validation.
func (v Int8ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int8)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int8")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int8ValidationWithStringArgsFunc is a custom validation function that can be applied to a int8 value with string args.
type Int8ValidationWithStringArgsFunc func(i int8, args ...string) error

// Validate implements Validation.
func (v Int8ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int8)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int8")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int8ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a int8 value with float64 args.
type Int8ValidationWithFloat64ArgsFunc func(i int8, args ...float64) error

// Validate implements Validation.
func (v Int8ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int8)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int8")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int8ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a int8 value with int64 args.
type Int8ValidationWithInt64ArgsFunc func(i int8, args ...int64) error

// Validate implements Validation.
func (v Int8ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int8)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int8")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Int8ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a int8 value with interface{} args.
type Int8ValidationWithInterfaceArgsFunc func(i int8, args ...interface{}) error

// Validate implements Validation.
func (v Int8ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(int8)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a int8")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// RuneValidationWithBoolArgsFunc is a custom validation function that can be applied to a rune value with bool args.
type RuneValidationWithBoolArgsFunc func(i rune, args ...bool) error

// Validate implements Validation.
func (v RuneValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(rune)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a rune")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// RuneValidationWithStringArgsFunc is a custom validation function that can be applied to a rune value with string args.
type RuneValidationWithStringArgsFunc func(i rune, args ...string) error

// Validate implements Validation.
func (v RuneValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(rune)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a rune")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// RuneValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a rune value with float64 args.
type RuneValidationWithFloat64ArgsFunc func(i rune, args ...float64) error

// Validate implements Validation.
func (v RuneValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(rune)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a rune")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// RuneValidationWithInt64ArgsFunc is a custom validation function that can be applied to a rune value with int64 args.
type RuneValidationWithInt64ArgsFunc func(i rune, args ...int64) error

// Validate implements Validation.
func (v RuneValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(rune)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a rune")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// RuneValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a rune value with interface{} args.
type RuneValidationWithInterfaceArgsFunc func(i rune, args ...interface{}) error

// Validate implements Validation.
func (v RuneValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(rune)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a rune")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// StringValidationWithBoolArgsFunc is a custom validation function that can be applied to a string value with bool args.
type StringValidationWithBoolArgsFunc func(i string, args ...bool) error

// Validate implements Validation.
func (v StringValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(string)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a string")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// StringValidationWithStringArgsFunc is a custom validation function that can be applied to a string value with string args.
type StringValidationWithStringArgsFunc func(i string, args ...string) error

// Validate implements Validation.
func (v StringValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(string)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a string")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// StringValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a string value with float64 args.
type StringValidationWithFloat64ArgsFunc func(i string, args ...float64) error

// Validate implements Validation.
func (v StringValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(string)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a string")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// StringValidationWithInt64ArgsFunc is a custom validation function that can be applied to a string value with int64 args.
type StringValidationWithInt64ArgsFunc func(i string, args ...int64) error

// Validate implements Validation.
func (v StringValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(string)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a string")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// StringValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a string value with interface{} args.
type StringValidationWithInterfaceArgsFunc func(i string, args ...interface{}) error

// Validate implements Validation.
func (v StringValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(string)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a string")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// UintValidationWithBoolArgsFunc is a custom validation function that can be applied to a uint value with bool args.
type UintValidationWithBoolArgsFunc func(i uint, args ...bool) error

// Validate implements Validation.
func (v UintValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// UintValidationWithStringArgsFunc is a custom validation function that can be applied to a uint value with string args.
type UintValidationWithStringArgsFunc func(i uint, args ...string) error

// Validate implements Validation.
func (v UintValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// UintValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a uint value with float64 args.
type UintValidationWithFloat64ArgsFunc func(i uint, args ...float64) error

// Validate implements Validation.
func (v UintValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// UintValidationWithInt64ArgsFunc is a custom validation function that can be applied to a uint value with int64 args.
type UintValidationWithInt64ArgsFunc func(i uint, args ...int64) error

// Validate implements Validation.
func (v UintValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// UintValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a uint value with interface{} args.
type UintValidationWithInterfaceArgsFunc func(i uint, args ...interface{}) error

// Validate implements Validation.
func (v UintValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint16ValidationWithBoolArgsFunc is a custom validation function that can be applied to a uint16 value with bool args.
type Uint16ValidationWithBoolArgsFunc func(i uint16, args ...bool) error

// Validate implements Validation.
func (v Uint16ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint16)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint16")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint16ValidationWithStringArgsFunc is a custom validation function that can be applied to a uint16 value with string args.
type Uint16ValidationWithStringArgsFunc func(i uint16, args ...string) error

// Validate implements Validation.
func (v Uint16ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint16)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint16")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint16ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a uint16 value with float64 args.
type Uint16ValidationWithFloat64ArgsFunc func(i uint16, args ...float64) error

// Validate implements Validation.
func (v Uint16ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint16)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint16")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint16ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a uint16 value with int64 args.
type Uint16ValidationWithInt64ArgsFunc func(i uint16, args ...int64) error

// Validate implements Validation.
func (v Uint16ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint16)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint16")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint16ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a uint16 value with interface{} args.
type Uint16ValidationWithInterfaceArgsFunc func(i uint16, args ...interface{}) error

// Validate implements Validation.
func (v Uint16ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint16)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint16")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint32ValidationWithBoolArgsFunc is a custom validation function that can be applied to a uint32 value with bool args.
type Uint32ValidationWithBoolArgsFunc func(i uint32, args ...bool) error

// Validate implements Validation.
func (v Uint32ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint32")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint32ValidationWithStringArgsFunc is a custom validation function that can be applied to a uint32 value with string args.
type Uint32ValidationWithStringArgsFunc func(i uint32, args ...string) error

// Validate implements Validation.
func (v Uint32ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint32")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint32ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a uint32 value with float64 args.
type Uint32ValidationWithFloat64ArgsFunc func(i uint32, args ...float64) error

// Validate implements Validation.
func (v Uint32ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint32")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint32ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a uint32 value with int64 args.
type Uint32ValidationWithInt64ArgsFunc func(i uint32, args ...int64) error

// Validate implements Validation.
func (v Uint32ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint32")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint32ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a uint32 value with interface{} args.
type Uint32ValidationWithInterfaceArgsFunc func(i uint32, args ...interface{}) error

// Validate implements Validation.
func (v Uint32ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint32)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint32")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint64ValidationWithBoolArgsFunc is a custom validation function that can be applied to a uint64 value with bool args.
type Uint64ValidationWithBoolArgsFunc func(i uint64, args ...bool) error

// Validate implements Validation.
func (v Uint64ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint64")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint64ValidationWithStringArgsFunc is a custom validation function that can be applied to a uint64 value with string args.
type Uint64ValidationWithStringArgsFunc func(i uint64, args ...string) error

// Validate implements Validation.
func (v Uint64ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint64")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint64ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a uint64 value with float64 args.
type Uint64ValidationWithFloat64ArgsFunc func(i uint64, args ...float64) error

// Validate implements Validation.
func (v Uint64ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint64")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint64ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a uint64 value with int64 args.
type Uint64ValidationWithInt64ArgsFunc func(i uint64, args ...int64) error

// Validate implements Validation.
func (v Uint64ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint64")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint64ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a uint64 value with interface{} args.
type Uint64ValidationWithInterfaceArgsFunc func(i uint64, args ...interface{}) error

// Validate implements Validation.
func (v Uint64ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint64)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint64")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint8ValidationWithBoolArgsFunc is a custom validation function that can be applied to a uint8 value with bool args.
type Uint8ValidationWithBoolArgsFunc func(i uint8, args ...bool) error

// Validate implements Validation.
func (v Uint8ValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint8)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint8")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint8ValidationWithStringArgsFunc is a custom validation function that can be applied to a uint8 value with string args.
type Uint8ValidationWithStringArgsFunc func(i uint8, args ...string) error

// Validate implements Validation.
func (v Uint8ValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint8)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint8")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint8ValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a uint8 value with float64 args.
type Uint8ValidationWithFloat64ArgsFunc func(i uint8, args ...float64) error

// Validate implements Validation.
func (v Uint8ValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint8)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint8")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint8ValidationWithInt64ArgsFunc is a custom validation function that can be applied to a uint8 value with int64 args.
type Uint8ValidationWithInt64ArgsFunc func(i uint8, args ...int64) error

// Validate implements Validation.
func (v Uint8ValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint8)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint8")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// Uint8ValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a uint8 value with interface{} args.
type Uint8ValidationWithInterfaceArgsFunc func(i uint8, args ...interface{}) error

// Validate implements Validation.
func (v Uint8ValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uint8)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uint8")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// UintptrValidationWithBoolArgsFunc is a custom validation function that can be applied to a uintptr value with bool args.
type UintptrValidationWithBoolArgsFunc func(i uintptr, args ...bool) error

// Validate implements Validation.
func (v UintptrValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uintptr)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uintptr")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// UintptrValidationWithStringArgsFunc is a custom validation function that can be applied to a uintptr value with string args.
type UintptrValidationWithStringArgsFunc func(i uintptr, args ...string) error

// Validate implements Validation.
func (v UintptrValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uintptr)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uintptr")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// UintptrValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a uintptr value with float64 args.
type UintptrValidationWithFloat64ArgsFunc func(i uintptr, args ...float64) error

// Validate implements Validation.
func (v UintptrValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uintptr)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uintptr")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// UintptrValidationWithInt64ArgsFunc is a custom validation function that can be applied to a uintptr value with int64 args.
type UintptrValidationWithInt64ArgsFunc func(i uintptr, args ...int64) error

// Validate implements Validation.
func (v UintptrValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uintptr)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uintptr")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// UintptrValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a uintptr value with interface{} args.
type UintptrValidationWithInterfaceArgsFunc func(i uintptr, args ...interface{}) error

// Validate implements Validation.
func (v UintptrValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(uintptr)
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a uintptr")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// InterfaceValidationWithBoolArgsFunc is a custom validation function that can be applied to a interface{} value with bool args.
type InterfaceValidationWithBoolArgsFunc func(i interface{}, args ...bool) error

// Validate implements Validation.
func (v InterfaceValidationWithBoolArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(interface{})
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a interface{}")
	}

	t2s := []bool{}
	for _, arg := range args {
		t2, ok := arg.(bool)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a bool")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// InterfaceValidationWithStringArgsFunc is a custom validation function that can be applied to a interface{} value with string args.
type InterfaceValidationWithStringArgsFunc func(i interface{}, args ...string) error

// Validate implements Validation.
func (v InterfaceValidationWithStringArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(interface{})
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a interface{}")
	}

	t2s := []string{}
	for _, arg := range args {
		t2, ok := arg.(string)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a string")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// InterfaceValidationWithFloat64ArgsFunc is a custom validation function that can be applied to a interface{} value with float64 args.
type InterfaceValidationWithFloat64ArgsFunc func(i interface{}, args ...float64) error

// Validate implements Validation.
func (v InterfaceValidationWithFloat64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(interface{})
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a interface{}")
	}

	t2s := []float64{}
	for _, arg := range args {
		t2, ok := arg.(float64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a float64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// InterfaceValidationWithInt64ArgsFunc is a custom validation function that can be applied to a interface{} value with int64 args.
type InterfaceValidationWithInt64ArgsFunc func(i interface{}, args ...int64) error

// Validate implements Validation.
func (v InterfaceValidationWithInt64ArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(interface{})
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a interface{}")
	}

	t2s := []int64{}
	for _, arg := range args {
		t2, ok := arg.(int64)
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a int64")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}

// InterfaceValidationWithInterfaceArgsFunc is a custom validation function that can be applied to a interface{} value with interface{} args.
type InterfaceValidationWithInterfaceArgsFunc func(i interface{}, args ...interface{}) error

// Validate implements Validation.
func (v InterfaceValidationWithInterfaceArgsFunc) Validate(i interface{}, args ...interface{}) error {
	t1, ok := i.(interface{})
	if !ok {
		return errors.Wrap(ErrIncompatibleFieldType, "expected a interface{}")
	}

	t2s := []interface{}{}
	for _, arg := range args {
		t2, ok := arg.(interface{})
		if !ok {
			return errors.Wrap(ErrInvalidParamType, "expected a interface{}")
		}

		t2s = append(t2s, t2)
	}

	return v(t1, t2s...)
}
