// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package validate

import (
	"fmt"
	"time"
)

// lessThanfloat64 validates `i` is less than `others`.
func lessThanfloat64(i float64, others ...float64) error {
	for _, other := range others {
		if i >= other {
			return fmt.Errorf("expected %v to be less than %v", i, other)
		}
	}

	return nil
}

// lessThanOrEqualTofloat64 validates `i` is less than or equal to `others`.
func lessThanOrEqualTofloat64(i float64, others ...float64) error {
	for _, other := range others {
		if i > other {
			return fmt.Errorf("expected %v to be less than or equal to %v", i, other)
		}
	}

	return nil
}

// greaterThanfloat64 validates `i` is greater than `others`.
func greaterThanfloat64(i float64, others ...float64) error {
	for _, other := range others {
		if i <= other {
			return fmt.Errorf("expected %v to be greater than %v", i, other)
		}
	}

	return nil
}

// greaterThanOrEqualTofloat64 validates `i` is greater than or equal to `others`.
func greaterThanOrEqualTofloat64(i float64, others ...float64) error {
	for _, other := range others {
		if i < other {
			return fmt.Errorf("expected %v to be greater than or equal to %v", i, other)
		}
	}

	return nil
}

// lessThanint64 validates `i` is less than `others`.
func lessThanint64(i int64, others ...int64) error {
	for _, other := range others {
		if i >= other {
			return fmt.Errorf("expected %v to be less than %v", i, other)
		}
	}

	return nil
}

// lessThanOrEqualToint64 validates `i` is less than or equal to `others`.
func lessThanOrEqualToint64(i int64, others ...int64) error {
	for _, other := range others {
		if i > other {
			return fmt.Errorf("expected %v to be less than or equal to %v", i, other)
		}
	}

	return nil
}

// greaterThanint64 validates `i` is greater than `others`.
func greaterThanint64(i int64, others ...int64) error {
	for _, other := range others {
		if i <= other {
			return fmt.Errorf("expected %v to be greater than %v", i, other)
		}
	}

	return nil
}

// greaterThanOrEqualToint64 validates `i` is greater than or equal to `others`.
func greaterThanOrEqualToint64(i int64, others ...int64) error {
	for _, other := range others {
		if i < other {
			return fmt.Errorf("expected %v to be greater than or equal to %v", i, other)
		}
	}

	return nil
}

// lessThantimeDuration validates `i` is less than `others`.
func lessThantimeDuration(i time.Duration, others ...time.Duration) error {
	for _, other := range others {
		if i >= other {
			return fmt.Errorf("expected %v to be less than %v", i, other)
		}
	}

	return nil
}

// lessThanOrEqualTotimeDuration validates `i` is less than or equal to `others`.
func lessThanOrEqualTotimeDuration(i time.Duration, others ...time.Duration) error {
	for _, other := range others {
		if i > other {
			return fmt.Errorf("expected %v to be less than or equal to %v", i, other)
		}
	}

	return nil
}

// greaterThantimeDuration validates `i` is greater than `others`.
func greaterThantimeDuration(i time.Duration, others ...time.Duration) error {
	for _, other := range others {
		if i <= other {
			return fmt.Errorf("expected %v to be greater than %v", i, other)
		}
	}

	return nil
}

// greaterThanOrEqualTotimeDuration validates `i` is greater than or equal to `others`.
func greaterThanOrEqualTotimeDuration(i time.Duration, others ...time.Duration) error {
	for _, other := range others {
		if i < other {
			return fmt.Errorf("expected %v to be greater than or equal to %v", i, other)
		}
	}

	return nil
}
